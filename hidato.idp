/*
* Stijn De Bels en Felix Lerner
* Description: Hidato ~ The goal is to fill the grid with a series
*                       of consecutive numbers adjacent to each other
*                       vertically, horizontally, or diagonally.
*/

vocabulary V {
  type Rij isa nat
  type Kolom isa nat
  type Getal isa nat
  Gegeven(Rij,Kolom,Getal)
  Oplossing(Rij, Kolom): Getal
  Buur(Rij, Kolom, Rij, Kolom)
}

structure S : V {
  Rij = {1..5}
  Kolom = {1..5}
  Getal = {1..25}
  Gegeven = { 1,1,13; 1,3,15;
              2,2,25; 2,3,1;
              2,4,2;  2,5, 18;
              3,2,24; 3, 4,21;
              4,1,10; 4,3,22;
              4,4,4;  5,1,9;
              4,5,20; 5,4,6; }
}

theory T : V {
  // Elke gegeven oplossing is ook een oplossing
  !r[Rij] k[Kolom] g[Getal]: Gegeven(r, k, g) => Oplossing(r, k) = g.

  // Voor elk getal bestaat er een ander naburig getal dat 1 minder is dan het eerste getal
  !r1, k1, r2, k2: (Oplossing(r1, k1) - Oplossing(r2, k2) = 1 & Oplossing(r1,k1) ~= 1 & Oplossing(r1, k1) - Oplossing(r2, k2)>0) => Buur(r1, k1, r2, k2).

  !r1[Rij], k1[Kolom], r2[Rij], k2[Kolom]: ~(r1 = r2 & k1 = k2) => Oplossing(r1, k1) ~= Oplossing(r2, k2).

  {
    !r1, k1, r2, k2: Buur(r1, k1, r2, k2) <-
    ~(r1 = r2 & k1 = k2) & abs(r1 - r2) < 2 & abs(k1 - k2) < 2.
  }

}

procedure main() {
  stdoptions.nbmodels = 10
  printmodels(modelexpand(T, S))
}
