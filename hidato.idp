/*
* Stijn De Bels en Felix Lerner
* Title: Hidato (3 stars)
* Description: The goal is to fill the grid with a series
*              of consecutive numbers adjacent to each other
*              vertically, horizontally, or diagonally.
*/

vocabulary V {
  type Rij isa nat
  type Kolom isa nat
  type Getal isa nat
  Gegeven(Rij,Kolom,Getal)
  Oplossing(Rij, Kolom): Getal
  Buur(Rij, Kolom, Rij, Kolom)
  Leeg(Rij, Kolom)
}

structure S : V {
  Rij = { 1..8 }
  Kolom = { 1..8 }
  Getal = { 0..40 } // We beschouwen 0 als "geen oplossing"
  Gegeven = { 1,2,33; 1,3,35;
              2,3,24; 2,4,22;
              3,4,21;
              4,2,26;4,4,13;4,5,40;4,6,11;
              5,1,27;5,5,9;5,7,1;
              6,5,18;
              7,6,7;
              8,7,5; }
  Leeg = { 6,1; 6,2; 7,1; 7,2; 7,3; 7,4; 8,1; 8,2; 8,3; 8,4; 8,5; 8,6;
           1,6; 1,7; 1,8; 2,6; 2,7; 2,8; 3,7; 3,8; 4,7; 4,8; 5,8; 6,8}
}

theory T : V {
  // Elke gegeven oplossing is ook een oplossing
  !r[Rij] k[Kolom] g[Getal]: Gegeven(r, k, g) => Oplossing(r, k) = g.

  // Opeenvolgende getallen zijn buren
  !r1[Rij], k1[Kolom], r2[Rij], k2[Kolom]: (Oplossing(r1, k1) - Oplossing(r2, k2) = 1 &
                                            Oplossing(r1,k1) ~= 1 &
                                            Oplossing(r1, k1) - Oplossing(r2, k2) > 0 &
                                            ~(Leeg(r1, k1) | Leeg(r2, k2))) =>
                                            Buur(r1, k1, r2, k2).

  // Elk getal mag maar een keer voorkomen
  !r1[Rij], k1[Kolom], r2[Rij], k2[Kolom]: ~(r1 = r2 & k1 = k2) & ~(Leeg(r1, k1) | Leeg(r2, k2)) => Oplossing(r1, k1) ~= Oplossing(r2, k2).

  // Enkel Lege vakjes hebben een oplossing = 0 (geen oplossing)
  !r1[Rij], k1[Kolom]: Oplossing(r1, k1) = 0 <=> Leeg(r1, k1).

  {
    // Definieer buren
    !r1[Rij], k1[Kolom], r2[Rij], k2[Kolom]: Buur(r1, k1, r2, k2) <- ~(r1 = r2 & k1 = k2) & abs(r1 - r2) < 2 & abs(k1 - k2) < 2.
  }
}

procedure main() {
  stdoptions.nbmodels = 0
  printmodels(modelexpand(T, S))
}
